cmake_minimum_required(VERSION 2.8)

project(BTServices)
  message(STATUS "*** PROJECT_NAME = ${PROJECT_NAME}")

# ====================================================================================================================
# Two simple macros that when called with an unset or empty (environment) variable will
# halt the build.
#
# Call examples:
#
# CmakeCheckVar( NameOfSomeVariable)
#
# CmakeCheckEnvVar( NameOfEnvironmentVariable)
#
#
# TODO: move these macros to a more suitable location.
# ====================================================================================================================
macro( CmakeCheckVar var)

  if( NOT DEFINED ${var})
    message( FATAL_ERROR "variable ${var} is not set.")
  endif()
  if (${var} STREQUAL "")
    message( FATAL_ERROR "variable ${var} is empty.")
  endif()

  # message( "Variable ${var} has value ${${var}}")
endmacro()

macro( CmakeCheckEnvVar var)
  #message( "env name ${var} value $ENV{${var}}")

  set( what $ENV{${var}})
  #message( "what = ${what} ${${what}}")

  if( "${what}" STREQUAL "")
    message( FATAL_ERROR "Environment variable ${var} is empty or not set.")
  endif()

endmacro()

macro( Halt)
  message( "")
  message( "++++++++++++++++++++++++++++++++++++++++++++")
  message( "STOP STOP STOP STOP STOP STOP STOP STOP STOP")
  message( "++++++++++++++++++++++++++++++++++++++++++++")
  message( "")
  message( FATAL_ERROR "Halt called.")
endmacro()

set(CMAKE_INCLUDE_CURRENT_DIR ON)

## -fPIC: http://stackoverflow.com/questions/5311515/gcc-fpic-option
## -m32: http://stackoverflow.com/questions/2426478/when-should-m32-option-of-gcc-be-used

# Build x86 binary 
# Use "$ sudo apt-get install libbluetooth-dev:i386" to install m32 BlueZ library.
set(CMAKE_CXX_FLAGS "-Wall -Werror -m32 -fPIC") 
set(CMAKE_C_FLAGS "-Wall -Werror -m32 -fPIC") 
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/lib/i386-linux-gnu) # This is important to tell CMAKE to find those 64-bits libraries.

# Build x64 binary 
# Use "$ sudo apt-get install libbluetooth-dev" to install m64 BlueZ library.
#set(CMAKE_CXX_FLAGS "-Wall -Werror -m64 -fPIC") 
#set(CMAKE_C_FLAGS "-Wall -Werror -m64 -fPIC") 
#set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/lib/x86_64-linux-gnu) # This is important to tell CMAKE to find those 64-bits libraries.

include(${CMAKE_CURRENT_LIST_DIR}/Util-Conf.cmake)

set(BTServices_ROOT ${CMAKE_CURRENT_LIST_DIR} CACHE STRING "BTServices root directory")
  #message(STATUS "*** BTServices_ROOT = ${BTServices_ROOT}")

# Tools 
add_subdirectory(
	${CMAKE_CURRENT_SOURCE_DIR}/Tools 
	${CMAKE_CURRENT_BINARY_DIR}/Tools)
